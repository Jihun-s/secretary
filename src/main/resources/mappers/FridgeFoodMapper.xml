<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.softsociety.secretary.dao.FridgeFoodDAO">
	<!-- 냉장고에 음식 추가 -->
	<insert id="insertFridgeFood" parameterType="FridgeFood">
	    INSERT INTO SECRETARY_FRIDGE_FOOD (
	        FOOD_ID, FOOD_NAME,
	        FRIDGE_ID, FOOD_QUANTITY,
	        FOOD_CATEGORY
	        <if test="foodPurchaseDate != null">
	        , FOOD_PURCHASE_DATE
	        </if>
	        <if test="foodMadeDate != null">
	        , FOOD_MADE_DATE
	        </if>
	        <if test="foodExpiryDate != null">
	        , FOOD_EXPIRY_DATE
	        </if>
	        <if test="foodPrice != null">
	        , FOOD_PRICE
	        </if>
	        <if test="foodOriginalFile != null and foodSavedFile != null">
	        , FOOD_ORIGINAL_FILE, FOOD_SAVED_FILE
	        </if>
	    )
	    VALUES (
	        FRIDGE_FOOD_SEQ.NEXTVAL,
	        #{foodName},
	        #{fridgeId},
	        #{foodQuantity},
	        #{foodCategory}
	        <if test="foodPurchaseDate != null">
	        , #{foodPurchaseDate}
	        </if>
	        <if test="foodMadeDate != null">
	        , #{foodMadeDate}
	        </if>
	        <if test="foodExpiryDate != null">
	        , #{foodExpiryDate}
	        </if>
	        <if test="foodPrice != null">
	        , #{foodPrice}
	        </if>
	        <if test="foodOriginalFile != null and foodSavedFile != null">
	        , #{foodOriginalFile}, #{foodSavedFile}
	        </if>
	    )
	</insert>
	
	<!-- 냉장고의 음식 상세 정보 가져오기 -->
	<select id="getFoodDetails" resultType="FridgeFood">
	    SELECT * FROM SECRETARY_FRIDGE_FOOD WHERE FOOD_ID = #{foodId}
	</select>

	<!-- 냉장고의 음식 전체 출력하기 -->
	<select id="getAllFridgeFoods" resultType="FridgeFood">
	    SELECT * FROM SECRETARY_FRIDGE_FOOD
	</select>
	
	<!-- 특정 냉장고의 음식 출력하기 -->
	<select id="getFoodsByFridgeId" resultType="FridgeFood">
	    SELECT * FROM SECRETARY_FRIDGE_FOOD WHERE FRIDGE_ID = #{fridgeId}
	</select>
	
	<update id="modifyFridgeFood" parameterType="FridgeFood">
	    UPDATE SECRETARY_FRIDGE_FOOD
	    SET 
	        FOOD_NAME = #{foodName},
	        FRIDGE_ID = #{fridgeId},
	        FOOD_QUANTITY = #{foodQuantity},
	        FOOD_CATEGORY = #{foodCategory}
	        <if test="foodPurchaseDate != null">
	        , FOOD_PURCHASE_DATE = #{foodPurchaseDate}
	        </if>
	        <if test="foodExpiryDate != null">
	        , FOOD_EXPIRY_DATE = #{foodExpiryDate}
	        </if>
	        <if test="foodMadeDate != null">
	        , FOOD_MADE_DATE = #{foodMadeDate}
	        </if>
	        <if test="foodPrice != null">
	        , FOOD_PRICE = #{foodPrice}
	        </if>
	        <if test="foodOriginalFile != null">
	        , FOOD_ORIGINAL_FILE = #{foodOriginalFile}
	        </if>
	        <if test="foodSavedFile != null">
	        , FOOD_SAVED_FILE = #{foodSavedFile}
	        </if>
	    WHERE FOOD_ID = #{foodId}
	</update>

	<delete id="deleteFridgeFood" parameterType="int">
	    DELETE FROM SECRETARY_FRIDGE_FOOD WHERE FOOD_ID = #{foodId}
	</delete>
	
	<select id="getAllFoodsByCategory" resultType="FridgeFood">
	    SELECT f.*
	    FROM Secretary_FRIDGE_FOOD f
	    JOIN Secretary_Fridge r ON f.FRIDGE_ID = r.fridge_id
	    WHERE r.fridge_category = #{fridgeCategory}
	</select>
	
	<select id="getFoodCountByFridgeId" resultType="int">
	    SELECT COUNT(*) FROM Secretary_FRIDGE_FOOD WHERE fridge_id = #{fridgeId}
	</select>
</mapper>